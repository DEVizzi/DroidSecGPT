// android_malware_rules.yar

import "pe"
import "elf"

rule Android_DexClassLoader_Load
{
    meta:
        description = "Detects dynamic code loading via DexClassLoader"
        author = "izaz"
        malware_family = "Generic"
        score = 3

    strings:
        $dex = /new\s+DexClassLoader\s*\(/
        $path = /new\s+PathClassLoader\s*\(/

    condition:
        $dex or $path
}

rule Android_SystemLoadLibrary
{
    meta:
        description = "Detects native library loading via loadLibrary"
        author = "izaz"
        score = 2

    strings:
        $loadlib = "System.loadLibrary"
        $load = "System.load("

    condition:
        any of ($load*, $loadlib)
}

rule Android_Base64_AES_CBC
{
    meta:
        description = "Detects Base64 decode and AES/CBC usage"
        author = "izaz"
        score = 2

    strings:
        $base64 = "Base64.decode"
        $aes = "AES/CBC"
    condition:
        $base64 and $aes
}

rule Android_Root_Su_Binary
{
    meta:
        description = "Detects possible rooting via su binary"
        author = "izaz"
        score = 2

    strings:
        $su_path1 = "/system/bin/su"
        $su_path2 = "/system/xbin/su"
    condition:
        any of them
}

rule Android_Emulator_Detection
{
    meta:
        description = "Detects emulator fingerprint strings"
        author = "izaz"
        score = 2

    strings:
        $emu1 = "generic"
        $emu2 = "goldfish"
        $emu3 = "Emulator"
    condition:
        any of them
}

rule Android_Debugger_Detection
{
    meta:
        description = "Looks for Debug.isDebuggerConnected usage"
        author = "izaz"
        score = 2

    strings:
        $dbg = "Debug.isDebuggerConnected"
    condition:
        $dbg
}

rule Android_Hardcoded_Command
{
    meta:
        description = "Detects hardcoded shell commands in APK"
        author = "izaz"
        score = 2

    strings:
        $sh = "/system/bin/sh"
        $mount = "mount -o remount"
    condition:
        any of them
}

rule Dendroid_OR_RAT_Signature
{
    meta:
        description = "Matches Dendroid RAT indicators"
        author = "Stratosphere"
        malware_family = "Dendroid"
        score = 5

    strings:
        $cmd = "getService(\"android.app.activity_manager\""
        $bind = "bindService("
    condition:
        $cmd and $bind
}

rule HackingTeam_Android_RAT
{
    meta:
        description = "HackingTeam Android RAT sample"
        author = "DarkenCode"
        malware_family = "HackingTeam"
        score = 5

    strings:
        $ht1 = "com.hackingteam.android"
        $ht2 = "start_capture"
    condition:
        $ht1 or $ht2
}

// Additional generic malware rules inspired by community YARA collections
rule Malware_Suspicious_Packer
{
    meta:
        description = "Detect suspect packing/obfuscation"
        author = "Community"
        score = 1

    strings:
        $pack = { 50 4B 03 04 } /* zip header in APK */
        $zip = "classes.dex"
    condition:
        $pack and $zip
}
/*
Joker (a.k.a. Bread) is a spyware and premium SMS fraud malware family.
It stealthily subscribes users to paid services by abusing WAP billing and dynamic payloads.
The rule below detects Jokerâ€™s encrypted config format and MCC filtering.
*/
rule Android_Joker_Malware {
    meta:
        family = "Joker (Bread) Spyware/Premium SMS"
        description = "Detects Joker malware by obfuscated MCC list or config patterns"
        author = "Cybersecurity Researcher"
        reference = "CSIS analysis of Joker:contentReference[oaicite:2]{index=2}:contentReference[oaicite:3]{index=3}"
    strings:
        $mcc_list = "DEFAULT_COUNTRY_ISO" ascii              // MCC list variable (if not renamed)
        $config_delim = "#x#" ascii                          // Delimiter used in Joker config string
    condition:
        $mcc_list or (#config_delim > 2)
}

/*
Anubis is a sophisticated Android banking trojan.
It uses overlays, keylogging, and accessibility abuse to steal credentials.
The rule below detects overlay abuse and target app patterns.
*/
rule Android_Anubis_Banking_Trojan {
    meta:
        family = "Anubis Banking Trojan"
        description = "Detects Anubis malware by known overlay/target markers"
        author = "Cybersecurity Researcher"
        reference = "TrendMicro report on Anubis:contentReference[oaicite:7]{index=7}; BleepingComputer on targeted apps:contentReference[oaicite:8]{index=8}"
    strings:
        $overlay_str = "AccessibilityService" ascii        // Uses accessibility for overlays/keylogging
        $target1 = "com.bank" ascii                        // Example substring from targeted bank app packages
        $target2 = "login_activity" ascii                  // Common in overlay phishing layout names
    condition:
        $overlay_str and ($target1 or $target2)
}

/*
DroidJack (a.k.a. SandroRAT) is a commercial Android RAT.
It provides full remote control, audio recording, SMS theft, and GPS tracking.
The rule below detects the unique DroidJack package and class references.
*/
rule Android_DroidJack_RAT {
    meta:
        family = "DroidJack Android RAT"
        description = "Detects DroidJack (SandroRAT) by its distinctive package/classes"
        author = "Cybersecurity Researcher"
        reference = "Hybrid-Analysis DroidJack sample:contentReference[oaicite:11]{index=11}"
    strings:
        $pkg = "net.droidjack.server" ascii    // Known DroidJack package namespace
        $cls = "droidjack.server.MainActivity" ascii  // Main RAT activity class
    condition:
        $pkg or $cls
}

/*
Dendroid is a leaked Android RAT that includes call/SMS interception, webcam spying, and file manipulation.
This rule flags its known package name and background service.
*/
rule Android_Dendroid_RAT {
    meta:
        family = "Dendroid Android RAT"
        description = "Detects Dendroid RAT by known package and service names"
        author = "Cybersecurity Researcher"
        reference = "SonicWall analysis of leaked Dendroid source:contentReference[oaicite:14]{index=14}"
    strings:
        $pkg = "com.hidden.droidian" ascii    // Dendroid APK package name
        $svc = "DroidianService" ascii        // Dendroid service that runs in background
    condition:
        $pkg or $svc
}

/*
HummingBad is a persistent Android rootkit/ad-fraud malware.
It exploits root access and installs system-level adware.
The rule below detects rootkit persistence indicators.
*/
rule Android_HummingBad_Rootkit {
    meta:
        family = "HummingBad/Hummer Adware Rootkit"
        description = "Detects HummingBad trojan by rootkit persistence artifacts"
        author = "Cybersecurity Researcher"
        reference = "Check Point HummingBad research:contentReference[oaicite:17]{index=17}"
    strings:
        $install_sh = "/system/bin/install-recovery.sh" ascii   // Often hijacked for persistence
        $supolicy = "supolicy" ascii                            // Tool string from rooting toolkit
        $hidden_su = "/system/xbin/kujsu" ascii                 // Example of hidden SU binary name
    condition:
        $install_sh or $supolicy or $hidden_su
}

/*
This rule detects heavily obfuscated DEX files using short, single-letter class names.
Such naming often indicates ProGuard or packer-style obfuscation used by malware.
*/
rule Android_Obfuscation_ShortNames {
    meta:
        description = "Detects highly obfuscated DEX code by many short class names"
        author = "Cybersecurity Researcher"
        reference = "Obfuscation techniques using class renaming:contentReference[oaicite:20]{index=20}"
    strings:
        $cls_a = "/a;" ascii
        $cls_b = "/b;" ascii
        $cls_c = "/c;" ascii
        $cls_d = "/d;" ascii
        $cls_e = "/e;" ascii
        $cls_f = "/f;" ascii
        $cls_g = "/g;" ascii
        $cls_h = "/h;" ascii
        $cls_i = "/i;" ascii
        $cls_j = "/j;" ascii
        $cls_k = "/k;" ascii
        $cls_l = "/l;" ascii
        $cls_m = "/m;" ascii
        $cls_n = "/n;" ascii
        $cls_o = "/o;" ascii
        $cls_p = "/p;" ascii
        $cls_q = "/q;" ascii
        $cls_r = "/r;" ascii
        $cls_s = "/s;" ascii
        $cls_t = "/t;" ascii
        $cls_u = "/u;" ascii
        $cls_v = "/v;" ascii
        $cls_w = "/w;" ascii
        $cls_x = "/x;" ascii
        $cls_y = "/y;" ascii
        $cls_z = "/z;" ascii
    condition:
        uint32(0) == 0x6465780A and
        #cls_a + #cls_b + #cls_c + #cls_d + #cls_e + #cls_f +
        #cls_g + #cls_h + #cls_i + #cls_j + #cls_k + #cls_l +
        #cls_m + #cls_n + #cls_o + #cls_p + #cls_q + #cls_r +
        #cls_s + #cls_t + #cls_u + #cls_v + #cls_w + #cls_x +
        #cls_y + #cls_z > 20
}

/*
Malware often encrypts sensitive strings/configs using Base64 and AES.
This rule detects such encryption primitives as indicators of malicious code hiding.
*/
rule Android_EncryptedStrings_Used {
    meta:
        description = "Detects usage of Base64 and AES encryption routines (possible string or config encryption)"
        author = "Cybersecurity Researcher"
        reference = "Android malware using encryption to hide code:contentReference[oaicite:22]{index=22}"
    strings:
        $base64 = "Base64.decode" ascii
        $cipher = "Cipher.getInstance" ascii
        $aes    = "\"AES\"" ascii                          // literal "AES" in code (cipher name)
        $secretKey = "SecretKeySpec" ascii
    condition:
        ($base64 and $cipher) or ($base64 and $secretKey) or ($cipher and $aes)
}

/*
Android malware often uses dynamic code loading via DexClassLoader or native libraries.
This rule detects such behaviors, which are uncommon in benign apps.
*/
rule Android_DynamicCode_Loading {
    meta:
        description = "Detects dynamic code loading or command execution (DexClassLoader, exec calls)"
        author = "Cybersecurity Researcher"
        reference = "Dynamic loading used by droppers and packers:contentReference[oaicite:23]{index=23}:contentReference[oaicite:24]{index=24}"
    strings:
        $dexloader = "dalvik.system.DexClassLoader" ascii   // Loading external DEX
        $loadlib   = "System.loadLibrary" ascii             // Loading .so libraries
        $exec1     = "Runtime.getRuntime().exec" ascii      // Command execution
        $exec2     = "ProcessBuilder" ascii                 // Alternate exec approach
    condition:
        $dexloader or $loadlib or $exec1 or $exec2
}

/*
Malware uses emulator detection to evade analysis.
This rule detects emulator/emulated property checks in Java code.
*/
rule Android_AntiEmulator_Java {
    meta:
        description = "Detects emulator or sandbox checks in Android app code"
        author = "Cybersecurity Researcher"
        reference = "Common emulator detection strings in malware:contentReference[oaicite:27]{index=27}"
    strings:
        $qemu = "ro.kernel.qemu" ascii                // System property set on emulators
        $goldfish = "goldfish" ascii                 // Goldfish/Ranchu = emulator hardware
        $sdk = "generic" ascii                       // Generic SDK strings
        $debug = "Debug.isDebuggerConnected" ascii   // Debugger check API
    condition:
        $qemu or $goldfish or $sdk or $debug
}

/*
Native ELF binaries may use ptrace and tracer checks to detect debugging.
This rule finds those anti-analysis techniques common in sophisticated malware.
*/
rule Android_AntiDebug_Native {
    meta:
        description = "Detects anti-debugging and anti-tracing in native code (ELF binaries)"
        author = "Cybersecurity Researcher"
        reference = "Malware using ptrace to prevent debugging:contentReference[oaicite:28]{index=28}"
    strings:
        $ptrace = "ptrace" ascii              // ptrace() call used to prevent debuggers
        $tracer = "TracerPid" ascii           // Check of /proc/self/status TracerPid
        $frida  = "frida" ascii               // Common hook framework to detect
    condition:
        uint32(0) == 0x464c457f and ( $ptrace or $tracer or $frida )
}